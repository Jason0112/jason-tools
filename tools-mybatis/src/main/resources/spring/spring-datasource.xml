<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- JNDI方式配置数据源 -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="${jndiName}"></property> </bean> -->
    <!-- ========================================配置数据源========================================= -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <!-- 配置主数据源(写库) -->
    <bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
        <property name="url" value="${master.jdbc.url}"/>
        <property name="username" value="${master.jdbc.username}"/>
        <property name="password" value="${master.jdbc.password}"/>
        <property name="driverClassName" value="${write.jdbc.driverClassName}"/>
        <property name="filters" value="${write.filters}"/>
        <property name="defaultAutoCommit" value="${write.defaultAutoCommit}"/>
        <property name="maxActive" value="${write.maxActive}"/>
        <property name="initialSize" value="${write.initialSize}"/>
        <property name="maxWait" value="${write.maxWait}"/>
        <property name="minIdle" value="${write.minIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${write.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${write.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${write.validationQuery}"/>
        <property name="testWhileIdle" value="${write.testWhileIdle}"/>
        <property name="testOnBorrow" value="${write.testOnBorrow}"/>
        <property name="testOnReturn" value="${write.testOnReturn}"/>
        <property name="removeAbandoned" value="${write.removeAbandoned}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${write.removeAbandonedTimeout}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${write.logAbandoned}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
    <!-- 配置从数据源(读库) -->
    <bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
        <property name="url" value="${slave0.jdbc.url}"/>
        <property name="username" value="${slave0.jdbc.username}"/>
        <property name="password" value="${slave0.jdbc.password}"/>
        <property name="driverClassName" value="${read.driverClassName}"/>
        <property name="filters" value="${read.filters}"/>
        <property name="defaultAutoCommit" value="${read.defaultAutoCommit}"/>
        <property name="maxActive" value="${read.maxActive}"/>
        <property name="initialSize" value="${read.initialSize}"/>
        <property name="maxWait" value="${read.maxWait}"/>
        <property name="minIdle" value="${read.minIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${read.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${read.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${read.validationQuery}"/>
        <property name="testWhileIdle" value="${read.testWhileIdle}"/>
        <property name="testOnBorrow" value="${read.testOnBorrow}"/>
        <property name="testOnReturn" value="${read.testOnReturn}"/>
        <property name="removeAbandoned" value="${read.removeAbandoned}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${read.removeAbandonedTimeout}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${read.logAbandoned}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
    </bean>

    <bean id="readWriteDataSource" class="com.tools.mybatis.datasource.ReadWriteDataSource">
        <property name="writeDataSource" ref="writeDataSource"/>
        <property name="readDataSourceMap">
            <map>
                <entry key="readDataSource1" value-ref="readDataSource"/>
            </map>
        </property>
    </bean>

    <!-- ========================================分隔线========================================= -->
    <!-- 注解方式配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

    <!-- 拦截器方式配置事物 -->

    <tx:advice id="transactionPointcut" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="put*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="use*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="list*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <bean id="readWriteDataSourceTransactionProcessor"
          class="com.tools.mybatis.datasource.ReadWriteDataSourceProcessor">
        <property name="forceChoiceReadWhenWrite" value="true"/>
    </bean>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务  * minxindai.callcenter.service..*Service.*(..)-->
        <aop:pointcut id="txPointcut" expression="execution(* com.tools.mybatis.service.*Impl.*(..))"/>
        <aop:advisor advice-ref="transactionPointcut" pointcut-ref="txPointcut"/>
        <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
            <aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>
        </aop:aspect>
    </aop:config>


    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 分页拦截器 -->
    <bean id="pageInterceptor" class="com.tools.mybatis.interceptor.MybatisSalInterceptor"/>
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="readWriteDataSource"/>
        <property name="plugins" ref="pageInterceptor"/>
        <property name="configLocation" value="classpath:/spring/spring-mybatis.xml"/>
        <property name="mapperLocations" value="classpath:com/tools/mybatis/mapping/xml/*Mapper.xml"/>
    </bean>

    <!-- 配置jdbc模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="readWriteDataSource"/>
    </bean>
    <!-- 配置扫描器 -->
    <!-- MapperScanner配置.自动去搜索mapper里的对象,并注入.  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.tools.mybatis.mapping这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.tools.mybatis.mapping"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- ========================================分隔线========================================= -->
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="readWriteDataSource"/>
    </bean>

     <!--配置druid监控spring jdbc-->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--service扫秒-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.tools.mybatis.service.impl.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

</beans>